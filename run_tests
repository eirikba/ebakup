#!/usr/bin/env python3
# -*- mode: python -*-

import argparse
import os
import re
import sys
import unittest

sys.path.append(os.path.join(os.path.dirname(__file__), 'pyebakup'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'tools'))

import tests.settings as test_settings

expected_tests = set((
    'backupcollection_tests.TestBasicBackup.test_add_duplicate_content',
    'backupcollection_tests.TestBasicBackup.test_backup_end_time',
    'backupcollection_tests.TestBasicBackup.test_backup_sequence',
    'backupcollection_tests.TestBasicBackup.test_backup_start_time',
    'backupcollection_tests.TestBasicBackup.test_checksum_timeline',
    'backupcollection_tests.TestBasicBackup.test_get_content_info',
    'backupcollection_tests.TestBasicBackup.test_get_content_reader',
    'backupcollection_tests.TestBasicBackup.test_get_file_info',
    'backupcollection_tests.TestBasicBackup.test_list_directory',
    'backupcollection_tests.TestBasicBackup.test_shadow_tree_created',
    'backupcollection_tests.TestBrokenUsage.test_add_two_files_with_same_path',
    'backupcollection_tests.TestBrokenUsage.test_open_collection_that_does_not_exist',
    'backupcollection_tests.TestSingleStuff.test_default_start_and_end_time',
    'backupcollection_tests.TestSingleStuff.test_get_most_recent_backup_when_no_backup_available',
    'backupcollection_tests.TestTwoBackups.test_backup_sequence',
    'backupcollection_tests.TestUtilities.test_make_path_from_contentid_in_new_collection',
    'backupoperation_tests.TestBasicBackup.test_correct_files_are_backed_up',
    'backupoperation_tests.TestBasicBackup.test_files_are_backed_up_with_correct_content',
    'backupoperation_tests.TestBasicBackup.test_files_are_backed_up_with_correct_metadata',
    'backupoperation_tests.TestBasicBackup.test_changed_file_is_updated',
    'backupoperation_tests.TestBasicBackup.test_changed_static_data_causes_error_to_be_reported',
    'backupoperation_tests.TestBasicBackup.test_file_with_identical_content_gets_same_contentid',
    'backupoperation_tests.TestBasicBackup.test_files_with_unchanged_mtime_and_size_are_assumed_same',
    'backupoperation_tests.TestBasicBackup.test_ignored_subtrees_are_not_traversed',
    'backupoperation_tests.TestBasicBackup.test_move_static_data_to_nonstatic_causes_error_to_be_reported',
    'backupoperation_tests.TestBasicBackup.test_moved_static_data_causes_no_error_to_be_reported',
    'backupoperation_tests.TestBasicBackup.test_removed_static_data_causes_error_to_be_reported',
    'backupoperation_tests.TestTwoBackups.test_correct_files_are_backed_up_1',
    'backupoperation_tests.TestTwoBackups.test_correct_files_are_backed_up_2',
    'backupoperation_tests.TestTwoBackups.test_files_are_backed_up_with_correct_content_1',
    'backupoperation_tests.TestTwoBackups.test_files_are_backed_up_with_correct_content_2',
    'backupoperation_tests.TestTwoBackups.test_files_are_backed_up_with_correct_metadata_1',
    'backupoperation_tests.TestTwoBackups.test_files_are_backed_up_with_correct_metadata_2',
    'backupoperation_tests.TestTwoBackups.test_second_backup_does_not_open_unchanged_files',
    'cli_tests.TestSimpleStuff.test_commandline_backup',
    'cli_tests.TestSimpleStuff.test_commandline_config',
    'cli_tests.TestSimpleStuff.test_commandline_info',
    'cli_tests.TestSimpleStuff.test_empty_commandline',
    'cli_tests.TestSimpleStuff.test_create_default_services',
    'config_tests.TestFullConfig.test_backup_main_exists',
    'config_tests.TestFullConfig.test_path_handlers',
    'config_tests.TestSimpleConfig.test_backup_home',
    'config_tests.TestSimpleConfig.test_backup_home_collection',
    'config_tests.TestSimpleConfig.test_backup_home_source',
    'config_tests.TestSimpleConfig.test_backup_home_source_item_handlers',
    'config_tests.TestSimpleConfig.test_backup_home_source_subtree_handler_iterator',
    'config_tests.TestVarious.test_read_non_existing_file',
    'config_tests.TestVarious.test_read_two_simple_files',
    'database_tests.TestSimpleDatabase.test_get_out_of_range_backups',
    'database_tests.TestSimpleDatabase.test_read_simple_database',
    'database_tests.TestWriteDatabase.test_create_database_in_existing_directory_fails',
    'database_tests.TestWriteDatabase.test_create_database_over_existing_file_fails',
    'database_tests.TestWriteDatabase.test_create_empty_database',
    'database_tests.TestWriteDatabase.test_create_database_with_single_backup',
    'database_tests.TestWriteDatabase.test_read_data_from_database_being_created',
    'database_tests.TestWriteDatabase.test_add_data_with_same_checksum',
    'database_tests.TestWriteDatabase.test_database_with_multiple_backups',
    'database_tests.TestWriteDatabase.test_invalid_utf8_in_file_names',
    'database_tests.TestWriteDatabase.test_iterate_contentids',
    'database_tests.TestWriteDatabase.test_multioctet_utf8_characters_in_file_names',
    'database_tests.TestWriteDatabase.test_new_database_with_a_few_files_has_small_data_files',
    'database_tests.TestWriteDatabase.test_various_timestamps_for_mtime',
    'datafile_tests.TestDataFile.test_create_content_db',
    'datafile_tests.TestDataFile.test_create_multi_block_content_db',
    'datafile_tests.TestDataFile.test_create_main_directory_already_exists',
    'datafile_tests.TestDataFile.test_create_simple_backup',
    'datafile_tests.TestDataFile.test_create_simple_backup_without_commit_will_abort',
    'datafile_tests.TestDataFile.test_create_typical_main',
    'datafile_tests.TestDataFile.test_main_with_non_matching_checksum',
    'datafile_tests.TestDataFile.test_open_backup_with_wrong_name',
    'datafile_tests.TestDataFile.test_open_main_does_not_exist',
    'datafile_tests.TestDataFile.test_raw_create_main_with_non_default_block_size',
    'datafile_tests.TestDataFile.test_raw_create_main_with_non_default_block_sum',
    'datafile_tests.TestDataFile.test_read_simple_backup',
    'datafile_tests.TestDataFile.test_read_main_with_non_default_block_size',
    'datafile_tests.TestDataFile.test_read_main_with_non_default_block_sum',
    'datafile_tests.TestDataFile.test_read_typical_content_db',
    'datafile_tests.TestDataFile.test_read_typical_main',
    'datafile_tests.TestDataFile.test_access_content_after_closing_it',
    'datafile_tests.TestDataFile.test_access_content_without_opening_it',
    'datafile_tests.TestDataFile.test_create_content_db_then_open_and_write_to_it',
    'datafile_tests.TestDataFile.test_get_and_open_content_when_it_does_not_exist',
    'datafile_tests.TestDataFile.test_get_unopened_content',
    'datafile_tests.TestDataFile.test_open_content_when_already_opened',
    'datafile_tests.TestDataFile.test_read_and_write_content_db',
    'datafile_tests.TestDataFile.test_create_simple_backup_with_special_files',
    'datafile_tests.TestDataFile.test_create_simple_backup_with_extra_file_data',
    'system_live_tests.TestLocalFileSys.test_get_filetype_pipe',
    'system_live_tests.TestLocalFileSys.test_get_filetype_regular',
    'system_live_tests.TestLocalFileSys.test_get_filetype_socket',
    'system_live_tests.TestLocalFileSys.test_get_filetype_symlink',
    'system_live_tests.TestLocalFileSys.test_readsymlink',
    'system_live_tests.TestLocalFileSys.test_readsymlink_on_file',
    'system_live_tests.TestLocalFileSys.test_size_of_symlink',
    'glob_utils_tests.TestSimpleGlobs.test_does_not_have_common_matches',
    'glob_utils_tests.TestSimpleGlobs.test_has_common_matches',
    'glob_utils_tests.TestSimpleGlobs.test_invalid_globs',
    'glob_utils_tests.TestSimpleGlobs.test_range_matches',
    'glob_utils_tests.TestSimpleGlobs.test_range_non_matches',
    'glob_utils_tests.TestSimpleGlobs.test_simple_matches',
    'glob_utils_tests.TestSimpleGlobs.test_simple_non_matches',
    'glob_utils_tests.TestSimpleGlobs.test_special_chars',
    'glob_utils_tests.TestSimpleGlobs.test_trivial_matches',
    'glob_utils_tests.TestSimpleGlobs.test_valid_globs',
    'http_handler_tests.TestTemplates.test_args_command',
    'http_handler_tests.TestTemplates.test_start_time',
    'http_server_tests.TestBasics.test_parallel_pipelined_requests',
    'http_server_tests.TestBasics.test_pipelined_requests',
    'http_server_tests.TestBasics.test_simple_request',
    'http_server_tests.TestBasics.test_wakeup',
    'system_cli_tests.TestFullSequenceOfOperations.test_everything',
    'system_backupoperation_tests.TestSimpleBackup.test_backed_up_files_have_correct_checksum',
    'system_backupoperation_tests.TestSimpleBackup.test_backed_up_files_have_correct_content',
    'system_backupoperation_tests.TestSimpleBackup.test_backed_up_files_have_correct_metadata',
    'system_backupoperation_tests.TestSimpleBackup.test_correct_files_backed_up',
    'system_backupoperation_tests.TestSimpleBackup.test_shadow_tree_is_linked_correctly',
    'system_backupoperation_tests.TestSimpleBackup.test_single_backup_created',
    'system_backupoperation_tests.TestSimpleBackup.test_start_end_times_sensible',
    'system_live_tests.TestBackup.test_all',
    'system_live_tests.TestLocalFileSys.test_get_existing_item',
    'system_live_tests.TestLocalFileSys.test_get_item_that_is_a_directory',
    'system_live_tests.TestLocalFileSys.test_get_non_existing_item',
    'system_tests.TestFullSequence.test_all',
    'task_backup_tests.TestSimpleBackup.test_backup_from_and_to_correct_path',
    'task_backup_tests.TestSimpleBackup.test_backup_handlers',
    'task_backup_tests.TestSimpleBackup.test_backup_performed',
    'task_backup_tests.TestSimpleBackup.test_backup_performed_to_existing_collection',
    'task_backup_tests.TestSimpleBackup.test_backup_to_collection_with_correct_path',
    'task_info_tests.TestInfoForEmptyConfig.test_output',
    'task_info_tests.TestInfoForFullConfig.test_backup_mine_is_correct',
    'task_info_tests.TestInfoForFullConfig.test_backup_mine_is_correct_partial',
    'task_info_tests.TestInfoForFullConfig.test_configured_backups_are_listed',
    'task_info_tests.TestInfoForFullConfig.test_toplevel_blocks',
    'task_sync_tests.TestSync.test_initial_sync_with_two_backups',
    'task_sync_tests.TestSync.test_simple_initial_sync',
    'task_sync_tests.TestSync.test_sync_with_common_backups',
    'task_sync_tests.TestSync.test_sync_with_new_backup_and_existing_content',
    'tool_dump_db_file_tests.TestEarlyFormat.test_basic_backup_file',
    'tool_dump_db_file_tests.TestEarlyFormat.test_content_file',
    'tool_dump_db_file_tests.TestEarlyFormat.test_main_file',
    'tool_dump_early_format_tests.TestSimpleDump.test_basic_backup_file',
    'tool_dump_early_format_tests.TestSimpleDump.test_failed_block_checksum_first_data_block',
    'tool_dump_early_format_tests.TestSimpleDump.test_failed_settings_checksum',
    'tool_dump_early_format_tests.TestSimpleDump.test_trailing_garbage_in_data_block',
    'tool_dump_early_format_tests.TestSimpleDump.test_trailing_garbage_in_settings_block',
    'tool_dump_early_format_tests.TestSimpleDump.test_main_file',
    'tool_dump_early_format_tests.TestSimpleDump.test_content_file',
    'valuecodecs_tests.TestCodecs.test_mtime_to_db_codec',
    'webui_tests.TestWebUI.test_basic_404',
))
expected_test_count = len(expected_tests)

def find_tests():
    loader = unittest.defaultTestLoader
    tests = loader.discover('tests', '*_tests.py')
    return tests

def strip_prefix(string, prefix):
    if string.startswith(prefix):
        return string[len(prefix):]
    return string

def name_of_test(test):
    '''Returns None if 'test' is not a single test.
    '''
    try:
        name = test.id()
    except AttributeError:
        return None
    # When run from the main directory, the "tests." prefix is not
    # present, but when run from elsewhere it is.
    return strip_prefix(name, 'tests.')

def make_test_name_list(tests):
    names = []
    name = name_of_test(tests)
    if name:
        names.append(name)
    try:
        testiter = iter(tests)
    except TypeError:
        testiter = []
    for test in testiter:
        names += make_test_name_list(test)
    return names

def main_manual():
    tests = find_tests()
    results = unittest.TestResult()
    tests.run(results)
    print(results)
    print('Total tests run: ' + str(results.testsRun))
    print('Skipped: ' + str(len(results.skipped)))
    for item in results.skipped:
        print(item)
    print('Expected failures: ' + str(len(results.expectedFailures)))
    for item in results.expectedFailures:
        print(item)
    print('Unexpected successes: ' + str(len(results.unexpectedSuccesses)))
    for item in results.unexpectedSuccesses:
        print(item)
    print('Errors: ' + str(len(results.errors)))
    for item in results.errors:
        print(item)
    print('Failures: ' + str(len(results.failures)))
    for item in results.failures:
        print(item)
    if results.wasSuccessful():
        print('SUCCESS!')
    else:
        print('FAILURE!')

def filter_tests(test):
    if not args.filter:
        return test
    main = None
    name = name_of_test(test)
    if name and (name.startswith('unittest') or re.search(args.filter, name)):
        main = test
    try:
        testiter = iter(test)
    except TypeError:
        testiter = ()
    subs = []
    for subtest in testiter:
        sub = filter_tests(subtest)
        if sub:
            subs.append(sub)
    if subs:
        filtered = unittest.TestSuite(subs)
        if main:
            filtered.addTest(main)
        return filtered
    return main

def parse_args():
    global args
    ap = argparse.ArgumentParser(description='Run tests')
    ap.add_argument('--live', action='store_true',
                    help='Also run live tests, i.e. tests that may modify '
                    'the real file system')
    ap.add_argument('filter', nargs='?',
                    help='A regular expression. All tests whose names are '
                    'matched by the regular expression are included in the '
                    'test run.')
    args = ap.parse_args()

def main_texttestrunner():
    parse_args()
    if args.live:
        test_settings.enable_live_tests()
    tests = find_tests()
    test_names = make_test_name_list(tests)
    nameset = set(test_names)
    filtered = filter_tests(tests)
    if not filtered:
        print('No tests left after filtering.')
        return
    runner = unittest.TextTestRunner()
    results = runner.run(filtered)

    if tests == filtered:
        if results.testsRun != expected_test_count:
            print('ERROR: Expected {} tests, got {}'.format(expected_test_count, results.testsRun))
        if results.testsRun != len(test_names):
            print('ERROR: Different number of test names ({}) than tests run ({})'.
                  format(len(test_names), results.testsRun))
        if len(nameset) != len(test_names):
            print('ERROR: Only {} unique test names out of {}'.
                  format(len(nameset), len(test_names)))
        unexpected_tests = nameset - expected_tests
        if unexpected_tests:
            print('ERROR: {} unexpected tests:'.format(len(unexpected_tests)))
            for test in sorted(unexpected_tests):
                print("    '" + test + "',")
        missing_tests = expected_tests - nameset
        if missing_tests:
            print('ERROR: {} missing tests:'.format(len(missing_tests)))
            for test in sorted(missing_tests):
                print("    '" + test + "',")
    else:
        print('Filtered tests, {} tests run out of {}'.format(
                results.testsRun, len(test_names)))
        unexpected_tests = nameset - expected_tests
        if unexpected_tests:
            print('ERROR: {} unexpected tests:'.format(len(unexpected_tests)))
            for test in sorted(unexpected_tests):
                print("    '" + test + "',")


main_texttestrunner()
